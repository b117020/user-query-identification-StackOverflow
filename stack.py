#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.25.1
#  in conjunction with Tcl version 8.6
#    Aug 27, 2019 10:50:27 PM IST  platform: Linux

import sys
import ibm




import requests 
import webbrowser
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import stack_support
import os.path

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    stack_support.set_Tk_var()
    top = Toplevel1 (root)
    stack_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    rt = root
    w = tk.Toplevel (root)
    stack_support.set_Tk_var()
    top = Toplevel1 (w)
    stack_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
    
class Toplevel1:
    def cancel(self):
        sys.exit()
    
    def show(self):
        global db
        db = stack_support.body.get()
        ibm.X_test.insert(0,db)
        ans = ibm.manual_predict(ibm.X_test)
        stack_support.tags.set(ans)
        print(ans)
        # importing the requests library 
        leng = len(ans)
        print(leng)
        op = []
        op = [''.join(words) for words in ans] 
        tags= ''
        for element in op:
            tags = tags + ';' + str(element)
        URL = "http://api.stackexchange.com/2.2/questions?page=1&pagesize=5&todate=1566777600&order=asc&sort=votes&tagged={}&site=stackoverflow".format(tags)

    

# api-endpoint 
# ds = "java;kotlin" 


# sending get request and saving the response as response object 
        r = requests.get(url = URL)

# extracting data in json format 
        data = r.json()
       
# print(data)
        global title
        global link
        for item in data['items']:
            title.insert(0,item['title'])
            link.insert(0,item['link'])
            print(item['title'])
            print(item['link'])

   

    
       
        #global title 
        #global link 
    
    def question1(self):
        new=1
        url=link[0]
        
    
        print(url)
        webbrowser.open(url,new=new)
        
    def question2(self):
        new=1
        url=link[1]
        
    
        print(url)
        webbrowser.open(url,new=new)
        
    def question3(self):
        new=1
        url=link[2]
        
    
        print(url)
        webbrowser.open(url,new=new)
        
    def question4(self):
        new=1
        url=link[3]
        
    
        print(url)
        webbrowser.open(url,new=new)
        
    def question5(self):
        new=1
        url=link[4]
        
    
        print(url)
        webbrowser.open(url,new=new)
    
    def clear(self):
        stack_support.tags.set(" ")
          
    
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {DejaVu Sans} -size 10 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("896x569+194+106")
        top.title("Stackoverflow Application")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.1, rely=0.826, height=31, width=381)
        self.Button1.configure(activebackground="#f9f9f9")
        self.Button1.configure(text='''Predict''')
        self.Button1.configure(command=self.show)


        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.022, rely=0.035, height=51, width=49)
        self.Label1.configure(font=font9)
        self.Label1.configure(text='''Title''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.011, rely=0.439, height=31, width=69)
        self.Label2.configure(font=font9)
        self.Label2.configure(text='''Body''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.011, rely=0.879, height=41, width=59)
        self.Label3.configure(font=font9)
        self.Label3.configure(text='''Tags''')

        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.536, rely=0.545, height=31, width=411)
        self.Button2.configure(text='''Result 5''')
        self.Button2.configure(command=self.question5)

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.536, rely=0.264, height=31, width=411)
        self.Button3.configure(text='''Result 1''')
        self.Button3.configure(command=self.question1)

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.536, rely=0.334, height=31, width=411)
        self.Button4.configure(text='''Result 2''')
        self.Button4.configure(command=self.question2)

        self.Button5 = tk.Button(top)
        self.Button5.place(relx=0.536, rely=0.404, height=31, width=411)
        self.Button5.configure(text='''Result 3''')
        self.Button5.configure(command=self.question3)

        self.Button6 = tk.Button(top)
        self.Button6.place(relx=0.536, rely=0.475, height=31, width=411)
        self.Button6.configure(text='''Result 4''')
        self.Button5.configure(command=self.question4)

        self.Button7 = tk.Button(top)
        self.Button7.place(relx=0.58, rely=0.826, height=31, width=101)
        self.Button7.configure(command=stack_support.Clear)
        self.Button7.configure(font=font9)
        self.Button7.configure(text='''Clear''')
        self.Button7.configure(command=self.clear)

        self.Button8 = tk.Button(top)
        self.Button8.place(relx=0.815, rely=0.826, height=31, width=111)
        self.Button8.configure(font=font9)
        self.Button8.configure(text='''Exit''')
        self.Button8.configure(command=self.cancel)

        self.TEntry1 = ttk.Entry(top)
        self.TEntry1.place(relx=0.1, rely=0.141, relheight=0.652, relwidth=0.429)

        self.TEntry1.configure(textvariable=stack_support.body)
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="xterm")


        self.TEntry2 = ttk.Entry(top)
        self.TEntry2.place(relx=0.1, rely=0.053, relheight=0.054, relwidth=0.429)

        self.TEntry2.configure(textvariable=stack_support.title)
        self.TEntry2.configure(takefocus="")
        self.TEntry2.configure(cursor="xterm")

        self.TEntry3 = ttk.Entry(top)
        self.TEntry3.place(relx=0.1, rely=0.896, relheight=0.054, relwidth=0.429)

        self.TEntry3.configure(textvariable=stack_support.tags)
        self.TEntry3.configure(takefocus="")
        self.TEntry3.configure(cursor="xterm")


        self.style.configure('TSizegrip', background=_bgcolor)
        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor='se', relx=1.0, rely=1.0)

        self.TSizegrip2 = ttk.Sizegrip(top)
        self.TSizegrip2.place(anchor='se', relx=1.0, rely=1.0)
'''
        self.Button10 = tk.Button(top)
        self.Button10.place(relx=0.569, rely=0.035, height=94, width=346)
        #photo_location = os.path.join(prog_location,"./Screenshot from 2019-08-27 22-40-13 (1).png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.Button10.configure(image=_img0)
        self.Button10.configure(text=''Button')
'''
if __name__ == '__main__':
    vp_start_gui()





